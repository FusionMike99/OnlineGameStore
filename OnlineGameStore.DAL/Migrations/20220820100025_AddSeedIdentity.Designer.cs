// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineGameStore.DAL.Data;

namespace OnlineGameStore.DAL.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20220820100025_AddSeedIdentity")]
    partial class AddSeedIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("274fcde0-2619-41c9-9772-6e964fa0ef7d"),
                            ConcurrencyStamp = "5d000d91-f28c-4641-8631-82e122962dbb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("3ae74d1f-43a3-43ef-bce2-0316994a2d0c"),
                            ConcurrencyStamp = "44c5f952-0a4b-4185-b853-b15e822a71ec",
                            Name = "Publisher",
                            NormalizedName = "PUBLISHER"
                        },
                        new
                        {
                            Id = new Guid("26bf4c5d-7779-4e3a-ad66-a59054e69d60"),
                            ConcurrencyStamp = "abc49135-8728-4ec6-a096-9efc5145a083",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = new Guid("3b175e2e-ba5f-4c9a-9a80-816c85065ecb"),
                            ConcurrencyStamp = "2847bb06-ce64-4579-a88b-b48d157f856b",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("35de8211-62d9-43c2-a3d0-d3bb50b44bf6"),
                            ConcurrencyStamp = "c2476c7b-d88a-4c0d-8826-d224525158ea",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("16997a3c-43a1-409e-95e2-06d4e9aebfe2"),
                            RoleId = new Guid("274fcde0-2619-41c9-9772-6e964fa0ef7d")
                        },
                        new
                        {
                            UserId = new Guid("e2523839-7358-41e6-85ed-a0c48ef27e47"),
                            RoleId = new Guid("26bf4c5d-7779-4e3a-ad66-a59054e69d60")
                        },
                        new
                        {
                            UserId = new Guid("cc0bb8a8-48f0-49fd-a1d5-08578f0a4cdb"),
                            RoleId = new Guid("3b175e2e-ba5f-4c9a-9a80-816c85065ecb")
                        },
                        new
                        {
                            UserId = new Guid("5ba77e7d-788a-403e-982c-29403d4d6dd2"),
                            RoleId = new Guid("35de8211-62d9-43c2-a3d0-d3bb50b44bf6")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsQuoted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReplyToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ReplyToId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuantityPerUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ViewsNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94c979fa-20e5-412e-895b-a694b94f5ad4"),
                            DateAdded = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2015, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "As war rages on throughout the Northern Realms, you take on the greatest contract of your life — tracking down the Child of Prophecy, a living weapon that can alter the shape of the world.",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "the-witcher-3",
                            Name = "The Witcher 3",
                            Price = 49.99m,
                            PublisherName = "CD Projekt RED",
                            QuantityPerUnit = "units",
                            UnitsInStock = (short)50,
                            ViewsNumber = 0m
                        });
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GameGenreEntity", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("GameGenre");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("94c979fa-20e5-412e-895b-a694b94f5ad4"),
                            GenreId = new Guid("e49f4755-02d6-444a-b25c-9e65c5298cc5"),
                            Id = new Guid("297c1914-86e5-4f50-a6d4-d0a83cce8c7b"),
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = new Guid("94c979fa-20e5-412e-895b-a694b94f5ad4"),
                            GenreId = new Guid("2d96d846-dd30-4982-95ea-1bf4aadf38f9"),
                            Id = new Guid("54716b49-d5e9-44d0-9c11-559d8b17d3dc"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GamePlatformTypeEntity", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatformType");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("94c979fa-20e5-412e-895b-a694b94f5ad4"),
                            PlatformId = new Guid("9f07b51a-f2cb-4c1b-ada4-b4ebb652ce0b"),
                            Id = new Guid("639847ca-2477-44fd-82c3-31204be47f80"),
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = new Guid("94c979fa-20e5-412e-895b-a694b94f5ad4"),
                            PlatformId = new Guid("8dac1629-29ce-4054-89f0-6d5bba95280f"),
                            Id = new Guid("07bcad23-3d65-43ad-b930-be5042bd77be"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8978f06e-a703-4746-bbe7-cc16a7e0249e"),
                            IsDeleted = false,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("46cc32ce-db19-4c56-86da-19713ddf6976"),
                            IsDeleted = false,
                            Name = "RTS",
                            ParentId = new Guid("8978f06e-a703-4746-bbe7-cc16a7e0249e")
                        },
                        new
                        {
                            Id = new Guid("773ec3e3-67fa-4a45-8d3a-1ad616b8913f"),
                            IsDeleted = false,
                            Name = "TBS",
                            ParentId = new Guid("8978f06e-a703-4746-bbe7-cc16a7e0249e")
                        },
                        new
                        {
                            Id = new Guid("e49f4755-02d6-444a-b25c-9e65c5298cc5"),
                            IsDeleted = false,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("ce5b782d-d609-4bd5-a1c2-230861d63e05"),
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("cb800c29-33e6-439e-b05e-657730c43213"),
                            IsDeleted = false,
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("45e4e6b3-dbf6-4bd7-9349-174aa48ab2a4"),
                            IsDeleted = false,
                            Name = "Rally",
                            ParentId = new Guid("cb800c29-33e6-439e-b05e-657730c43213")
                        },
                        new
                        {
                            Id = new Guid("94a5f76b-cc14-447d-b9fd-babd65d6f4d4"),
                            IsDeleted = false,
                            Name = "Arcade",
                            ParentId = new Guid("cb800c29-33e6-439e-b05e-657730c43213")
                        },
                        new
                        {
                            Id = new Guid("3b9515a5-cb4e-4667-8ff9-36ac005db45f"),
                            IsDeleted = false,
                            Name = "Formula",
                            ParentId = new Guid("cb800c29-33e6-439e-b05e-657730c43213")
                        },
                        new
                        {
                            Id = new Guid("d4937448-4b9d-4277-bc77-a6ed012f0403"),
                            IsDeleted = false,
                            Name = "Off-road",
                            ParentId = new Guid("cb800c29-33e6-439e-b05e-657730c43213")
                        },
                        new
                        {
                            Id = new Guid("ae4c8069-231a-4030-8202-907a2a548792"),
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("59800dd6-a511-47b3-9420-60376c6a813d"),
                            IsDeleted = false,
                            Name = "FPS",
                            ParentId = new Guid("ae4c8069-231a-4030-8202-907a2a548792")
                        },
                        new
                        {
                            Id = new Guid("cbab23a6-5122-4a72-995c-d3cd8d5ad6c3"),
                            IsDeleted = false,
                            Name = "TPS",
                            ParentId = new Guid("ae4c8069-231a-4030-8202-907a2a548792")
                        },
                        new
                        {
                            Id = new Guid("2d96d846-dd30-4982-95ea-1bf4aadf38f9"),
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("8f9804ae-fca1-4117-b89e-db24f038f30e"),
                            IsDeleted = false,
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("90649709-a022-415f-9e4b-45f4f9affc78"),
                            IsDeleted = false,
                            Name = "Misc."
                        });
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.OrderDetail", b =>
                {
                    b.Property<string>("GameKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m);

                    b.Property<short>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1);

                    b.HasKey("GameKey", "OrderId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<string>("ShipAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipPostalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipVia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.PlatformTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("PlatformTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d879fbc-75d9-4df6-8ea2-2c0484207e20"),
                            IsDeleted = false,
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("46c32720-7400-4e51-82bb-96d35d4eff18"),
                            IsDeleted = false,
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("9f07b51a-f2cb-4c1b-ada4-b4ebb652ce0b"),
                            IsDeleted = false,
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("8dac1629-29ce-4054-89f0-6d5bba95280f"),
                            IsDeleted = false,
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.PublisherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(40)")
                        .HasDefaultValue("");

                    b.Property<string>("ContactName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ContactTitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Fax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("PostalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Region")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b750162-60ab-4de9-a58d-f7ea9fbd0321"),
                            CompanyName = "CD Projekt RED",
                            Description = "Develop Witcher",
                            HomePage = "https://en.cdprojektred.com/",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f02a54ae-b7b2-4904-9b67-c14f5c9622a7"),
                            CompanyName = "Bethesda Softworks",
                            Description = "Develop The Elder Scrolls",
                            HomePage = "https://bethesda.net/dashboard",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eaad9f95-7976-4893-a1ed-17c1679f2728"),
                            CompanyName = "THQ Nordic",
                            Description = "Develop Star Wars",
                            HomePage = "https://www.thqnordic.com/",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PublisherId")
                        .IsUnique()
                        .HasFilter("[PublisherId] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16997a3c-43a1-409e-95e2-06d4e9aebfe2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d04621be-6e82-474a-98b6-473efe8bd2ed",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJYENB35bdztqN7tM2XpGuNiMWFVWS0MQ75g62NI1NYBKtQ6dLu2PtWR+Aw5ZQj2Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93BF6096-EA7C-4BB6-B450-45524E43312E",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = new Guid("e2523839-7358-41e6-85ed-a0c48ef27e47"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9735ae6-43d1-4c92-8359-5888532f1b4f",
                            Email = "moderator@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@GMAIL.COM",
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEPh8NxI2TxtD0IOQkOtiUnV/FLIKmWF1LHcgZHtzx9mGZKd5S+hicKRibIs9mJMITw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37037D92-39E2-41E0-B80A-38E2026B2280",
                            TwoFactorEnabled = false,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("cc0bb8a8-48f0-49fd-a1d5-08578f0a4cdb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd91f492-9d93-42c0-955d-e10700cf5c17",
                            Email = "manager@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJR5w4lKnIayWqsNFM7h7mIIDitx/A3ssbZjQ7gdssiYVR0fNh0GhjuTfYJ1dXZYXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3E5BC2B0-39EA-4F66-8BDF-C12EAA89F5DD",
                            TwoFactorEnabled = false,
                            UserName = "Manager"
                        },
                        new
                        {
                            Id = new Guid("5ba77e7d-788a-403e-982c-29403d4d6dd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0352bfc4-20dd-4b1d-8472-a8c4b6adc868",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFPU6PVz666a59OuDJzYimxz2jN9pcxQt6qsFbSKMYcwxqIybYJDWMyKERadjsbnvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67B7C86D-0D3F-492E-B499-078485DDEFC5",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineGameStore.DAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.CommentEntity", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.GameEntity", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineGameStore.DAL.Entities.CommentEntity", "ReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId");

                    b.Navigation("Game");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GameGenreEntity", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.GameEntity", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineGameStore.DAL.Entities.GenreEntity", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GamePlatformTypeEntity", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.GameEntity", "Game")
                        .WithMany("GamePlatformTypes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineGameStore.DAL.Entities.PlatformTypeEntity", "PlatformType")
                        .WithMany("GamePlatformTypes")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("PlatformType");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GenreEntity", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.GenreEntity", "Parent")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.OrderDetail", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.OrderEntity", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.UserEntity", b =>
                {
                    b.HasOne("OnlineGameStore.DAL.Entities.PublisherEntity", "Publisher")
                        .WithOne("User")
                        .HasForeignKey("OnlineGameStore.DAL.Entities.UserEntity", "PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.CommentEntity", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GameEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatformTypes");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.GenreEntity", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.OrderEntity", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.PlatformTypeEntity", b =>
                {
                    b.Navigation("GamePlatformTypes");
                });

            modelBuilder.Entity("OnlineGameStore.DAL.Entities.PublisherEntity", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
